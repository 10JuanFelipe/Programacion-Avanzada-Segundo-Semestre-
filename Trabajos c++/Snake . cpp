#include <iostream>
#include <conio.h>
#include <windows.h>
using namespace std;

bool gameOver; // Variable para verificar si el juego ha terminado
const int width = 20; // Ancho del tablero de juego
const int height = 20; // Altura del tablero de juego
int x, y, fruitX, fruitY, score; // Variables para la posición de la serpiente, posición de la fruta y puntaje
int tailX[100], tailY[100]; // Arrays para almacenar las coordenadas del cuerpo de la serpiente
int nTail; // Tamaño actual del cuerpo de la serpiente
enum eDirecton { STOP = 0, LEFT, RIGHT, UP, DOWN }; // Enumeración para representar las direcciones posibles
eDirecton dir; // Variable para almacenar la dirección actual de la serpiente

void Setup() {
    gameOver = false;
    dir = STOP;
    x = width / 2;
    y = height / 2;
    fruitX = rand() % width;
    fruitY = rand() % height;
    score = 0;
}

void Draw() {
    system("cls"); // Limpia la pantalla

    // Dibuja el tablero de juego
    for (int i = 0; i < width + 2; i++)
        cout << "#";
    cout << endl;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (j == 0)
                cout << "#";
            if (i == y && j == x)
                cout << "O"; // Dibuja la cabeza de la serpiente
            else if (i == fruitY && j == fruitX)
                cout << "F"; // Dibuja la fruta
            else {
                bool print = false;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        cout << "o"; // Dibuja el cuerpo de la serpiente
                        print = true;
                    }
                }
                if (!print)
                    cout << " ";
            }

            if (j == width - 1)
                cout << "#";
        }
        cout << endl;
    }

    for (int i = 0; i < width + 2; i++)
        cout << "#";
    cout << endl;

    cout << "Score:" << score << endl;
}

void Input() {
    if (_kbhit()) { // Verifica si se ha presionado una tecla
        switch (_getch()) {
        case 'a':
            dir = LEFT; // Cambia la dirección a la izquierda
            break;
        case 'd':
            dir = RIGHT; // Cambia la dirección a la derecha
            break;
        case 'w':
            dir = UP; // Cambia la dirección hacia arriba
            break;
        case 's':
            dir = DOWN; // Cambia la dirección hacia abajo
            break;
        case 'x':
            gameOver = true; // Finaliza el juego
            break;
        }
    }
}

void Logic() {
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;
    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }
    switch (dir) {
    case LEFT:
        x--;
        break;
    case RIGHT:
        x++;
        break;
    case UP:
        y--;
        break;
    case DOWN:
        y++;
        break;
    default:
        break;
    }

    // Si la serpiente alcanza los bordes del tablero, se teletransporta al lado opuesto
    if (x >= width)
        x = 0;
    else if (x < 0)
        x = width - 1;
    if (y >= height)
        y = 0;
    else if (y < 0)
        y = height - 1;

    // Si la serpiente se choca con su propio cuerpo, el juego termina
    for (int i = 0; i < nTail; i++)
        if (tailX[i] == x && tailY[i] == y)
            gameOver = true;

    // Si la serpiente come la fruta, se aumenta el puntaje y se genera una nueva fruta
    if (x == fruitX && y == fruitY) {
        score += 10;
        fruitX = rand() % width;
        fruitY = rand() % height;
        nTail++;
    }
}

int main() {
    Setup();
    while (!gameOver) {
        Draw();
        Input();
        Logic();
        Sleep(10); // Pausa el juego por un breve período para ralentizar la velocidad de movimiento de la serpiente
    }
    return 0;
}
